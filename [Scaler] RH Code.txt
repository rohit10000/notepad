BMI CALCULATOR
System.out.printf("%.1f", C);

LONGEST COMMON PREFIX
public class Solution {
    public String longestCommonPrefix(String[] A) {

        int n = A.length;
        
        int minl = Integer.MAX_VALUE;

        String output = "";
        
        for(int i=0;i<n;i++){
            
            String ivalue = A[i];
            int l = ivalue.length();
            if (l < minl) {
                output = ivalue;
                minl = l;
            }
        }

        for(int i=0;i<n;i++){

            String ivalue = A[i];
            int l = ivalue.length();
            
            int j = 0;
            while (j<minl) {
                if (ivalue.charAt(j) == output.charAt(j))
                    j++;
                else
                    break;
            }
            
            minl = j;
            output = ivalue.substring(0, minl);

        }

        return output;
    }
}

GENERATE ALL PARENTHESES II
public class Solution {
        String output[];
        int count = 0;
        
        public void generate(int counto, int countc, String current, int N){
            int n = current.length();
            
            if (n == 2*N) {
                output[count++] = current;
                return;
            }
            
            if(counto < N)
                generate(counto+1, countc, current+'(', N);

            if(countc < counto)
                generate(counto, countc+1, current+')', N);
        }
        
        public String[] generateParenthesis(int A) {
            output = new String[100005];
            
            generate(0, 0 , "", A);
            
            output = Arrays.copyOf(output, count);
            return output;
        }
}

COIN SUM INFINITE
public class Solution {
    public int coinchange2(int[] A, int B) {
        
        int n = A.length;
        int mod = (int)1e6 + 7;
        int dp[] = new int[B+1];
        dp[0] = 1;
        
        for (int i=0; i<n; i++) {
            int coinValue = A[i];
            for (int j=coinValue; j<=B; j++) {
                dp[j] += dp[j-coinValue];
                dp[j] %= mod;
            }
        }
        
        return dp[B];
    }
}

ATH LARGEST ELEMENT
public class Solution {
    public ArrayList<Integer> solve(int A, ArrayList<Integer> B) {
        ArrayList<Integer> result = new ArrayList<>();
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
        for(int i = 0; i < B.size(); i++){
            priorityQueue.offer(B.get(i));
            if (i<A-1)
                result.add(-1);
            else if(i == A-1)
                result.add(priorityQueue.peek());
            else {
                priorityQueue.poll();
                result.add(priorityQueue.peek());
            }
        }
        return result;
    }
}

DESIGN LINKED LIST
public class Solution {
	 	
	 	public ListNode solve(int[][] A) {
	 		ListNode head = null;
	 		
	 		int N=A.length;
	 		
	 		for(int r=0;r<N;r++) {
	 		    
	 		    int type = A[r][0];
	 		    int value = A[r][1];
	 		    int index = A[r][2];
	 		    
	 		    if(type == 0)
	 				head=insert_head(head, value);
	 				
	 			else if(type == 1)
	 				head=append_last(head, value);
	 				
	 			else if(type==2)
	 				head=insert_specific(head, value, index);
	 				
	 			else if(type==3) {
	 				head=delete_index(head, value);
	 			}
	 		}
	 		
	 		return head;
	    }
	 	
	 	public ListNode insert_head(ListNode head, int value) {
	 	    
	 		ListNode temp = new ListNode(value);
	 		
	 		if(head == null)
	 		    return temp;
	 		    
	 		temp.next = head;
	 		head = temp;
	 		
	 		return head;
	 	}
	 	
	 	public ListNode append_last(ListNode head, int value) {
	 		ListNode temp = new ListNode(value);
	 		
	 		if(head == null)
	 			return temp;
	 			
	 		ListNode ptr = head;
	 		while(ptr.next != null) {
	 			ptr = ptr.next;
	 		}
	 		ptr.next = temp;
	 		
	 		return head;
	 	}
	 	
	 	public int find_length(ListNode head) {
	 		ListNode ptr = head;
	 		int count = 0;
	 		
	 		while(head != null) {
	 		    head = head.next;
	 		    count++;
	 		}
	 		
	 		return count;
	 	}
	 	
	 	public ListNode insert_specific(ListNode head, int value, int index) {
	 		
	 		int length_of_ll = find_length(head);
	 		
	 		if (index > length_of_ll)
	 		    return head;
	 		
	 		if (index == 0)
	 		    return insert_head(head, value);
	 		
	 		ListNode temp = new ListNode(value);
	 		
	 		int hops = index-1;
	 		ListNode node = head;
	 		
	 		while (hops > 0) {
	 		    node = node.next;
	 		    hops--;
	 		}
	 		
	 		temp.next = node.next;
	 		node.next = temp;
	 		
	 		return head;
	 	}
	 	
	 	
	 	public ListNode delete_index(ListNode head, int index) {
	 	    
	 	    int length_of_ll = find_length(head);
	 		
	 		if (index >= length_of_ll)
	 		    return head;
	 		    
	 		if (index == 0)
	 		    return head.next;
	 		
	 		int hops = index-1;
	 		ListNode node = head;
	 		
	 		while (hops > 0) {
	 		    node = node.next;
	 		    hops--;
	 		}
	 		
	 		node.next = node.next.next;
	 		
	 		return head;
	 	}
}

REPEAT AND MISSING NUMBER ARRAY
SOLUTION1 : SIMPLE MATH
public class Solution {
    public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
        long n = A.size();
        
        long actualSum = 0, sum1toN = 0;
        long actualSquareSum = 0, squareSum1toN = 0;
        
        sum1toN = ((n+1)*n)/2;
        squareSum1toN = (n*(n+1)*(2*n+1))/6;
        
        for (int i=0; i<n; i++) {
            long ivalue = A.get(i);
            
            actualSum += ivalue;
            actualSquareSum += ivalue*ivalue;
        }
        
        long t = actualSum - sum1toN; // x - y ie. repeated - missing
        long k = actualSquareSum - squareSum1toN; // (x*x - y*y)
        
        long z = k/t; // x + y
        
        int x = (int)(t+z)/2;
        int y = (int)(z-t)/2;
        
        ArrayList<Integer> output = new ArrayList<>();
        output.add(x);
        output.add(y);
        
        return output;
    }
}
SOLUTION2: XOR WAY
public class Solution {
    
    public int[] repeatedNumber(final int[] A) {

        int x, y;
        int xor1;
        int n=A.length;
        int set_bit_no;
 
        int i;
        x = 0;
        y = 0;
 
        xor1 = A[0];
 
        for (i = 1; i < n; i++)
            xor1 = xor1 ^ A[i];
            
        for (i = 1; i <= n; i++)
            xor1 = xor1 ^ i;
        
        set_bit_no = xor1 & ~(xor1 - 1);
 
        for (i = 0; i < n; i++) {
            if ((A[i] & set_bit_no) != 0)
                x = x ^ A[i];
            else
                y = y ^ A[i];
        }
        
        for (i = 1; i <= n; i++) {
            if ((i & set_bit_no) != 0)
                x = x ^ i;
            else
                y = y ^ i;
        }

        boolean xIsMissing = true;

        for (i=0; i<n; i++)
            if (A[i] == x)
                xIsMissing = false;
                
        int arr[]=new int [2];
        
        if (xIsMissing) {
            arr[0] = y;
            arr[1] = x;
        } else {
            arr[0] = x;
            arr[1] = y;
        }
        
        return arr;
    }
}


COUNTING THE NODES
public class Solution {
    static int getCount(TreeNode A, int max){
        if (A == null)
            return 0;
        int count = 0;
        if (A.val > max) {
            count++;
            max = A.val;
        }
        count += getCount(A.left, max) + getCount(A.right, max);
        return count;
    }
    public int solve(TreeNode A) {
        int max = 0;
        int x = getCount(A, max);
        return x;
    }
}

DIVIDE INTEGERS
public class Solution {
    public int divide(int A, int B) {
        
        long output = 0;
        char sign = (A < 0 && B < 0) ||(A>0 && B>0) ? '+': '-';
        
        long a = A == Integer.MIN_VALUE ? Integer.MAX_VALUE + 1L : Math.abs(A);
        long b = Math.abs(B);
        
        while (a >= b) {
            int timesShiftLeft = 0;
            
            long k = b;
            while (a >= (k << 1)) {
                k = k << 1;
                timesShiftLeft++;
            }
            
            a = a - k;
            output += (1L << timesShiftLeft);
        }
        
        if (sign == '-')
            output = -output;
        
        return output > Integer.MAX_VALUE? Integer.MAX_VALUE: (int)output;
    }
}